/*
   In this problem we need to find out the subarray which has a maximum sum, we can include the circular array as well.
   
   to Solve this problem we will first find out the normal sum of the array .
   if the some of the array is nagetive we can return the output otherwise we wiLL add the other subarray with making them negative.
   
     
   
   
*/

int maxSum (int arr[], int n)
{
    int res = arr[0];
    int maxend = arr[0];
    
    for ( int i = 1; i<n; i++)
    {
      maxend = max( arr[i], maxend + arr[i]);
      
      res = max( res, maxend);
    }
    
    return res;
}

int overallMaxSum ( int arr[], int n )
{
  
  int max_normal = maxsum(arr, n);
  
  int ( max_normal < 0)
    return ( max_normal);
    
  int arr_sum = 0;
  
  for( int i=0; i<n ; i++)
  {
    arr_sum = arr[i];
    arr[i] = -arr[i];
  }
  
  int max_circular = arr_sum + maxsum(arr, n);
  
  
  return max( max_normal, max_circular );
  
}
